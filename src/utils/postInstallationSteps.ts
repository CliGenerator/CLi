
import { Framework, Feature } from './types';

export const postInstallationSteps: Record<Framework, Record<Feature, string[]>> = {
  react: {
    // Core features
    typescript: [],
    tailwind: [
      '// Add to index.css at the top:',
      '@tailwind base;',
      '@tailwind components;',
      '@tailwind utilities;'
    ],
    eslint: [],
    router: [
      '// Wrap your App component with BrowserRouter:',
      'import { BrowserRouter } from "react-router-dom";',
      '',
      '<BrowserRouter>',
      '  <App />',
      '</BrowserRouter>'
    ],
    sass: [],
    pwa: [
      '// Configure service-worker.js and register it in index.js',
      'if ("serviceWorker" in navigator) {',
      '  window.addEventListener("load", () => {',
      '    navigator.serviceWorker.register("/service-worker.js");',
      '  });',
      '}'
    ],
    prettier: [
      '// Create a .prettierrc file:',
      '{',
      '  "semi": true,',
      '  "tabWidth": 2,',
      '  "printWidth": 100,',
      '  "singleQuote": true,',
      '  "trailingComma": "es5"',
      '}'
    ],
    jest: [
      '// Jest is included with create-react-app by default',
      '// Run tests with:',
      'npm test'
    ],
    vitest: [
      '// Add vitest configuration file (vitest.config.js):',
      'import { defineConfig } from "vitest/config";',
      'export default defineConfig({',
      '  test: {',
      '    environment: "jsdom"',
      '  }',
      '});'
    ],
    // UI Libraries
    shadcn: [
      '// Run shadcn-ui init and follow the prompts',
      '// Import components like:',
      'import { Button } from "@/components/ui/button";'
    ],
    radix: [],
    aceternity: [],
    nextui: [
      '// Wrap your app with NextUIProvider:',
      'import { NextUIProvider } from "@nextui-org/react";',
      '',
      '<NextUIProvider>',
      '  <App />',
      '</NextUIProvider>'
    ],
    mantine: [
      '// Wrap your app with MantineProvider:',
      'import { MantineProvider } from "@mantine/core";',
      '',
      '<MantineProvider>',
      '  <App />',
      '</MantineProvider>'
    ],
    chakra: [
      '// Wrap your app with ChakraProvider:',
      'import { ChakraProvider } from "@chakra-ui/react";',
      '',
      '<ChakraProvider>',
      '  <App />',
      '</ChakraProvider>'
    ],
    framer: [],
    // Payment
    stripe: [],
    razorpay: [],
    paypal: [],
    // Cloud
    aws: [],
    azure: [],
    gcp: [],
    firebase: [
      '// Initialize Firebase in a firebase.js file:',
      'import { initializeApp } from "firebase/app";',
      'import { getAuth } from "firebase/auth";',
      'import { getFirestore } from "firebase/firestore";',
      '',
      'const firebaseConfig = {',
      '  // Your Firebase config',
      '};',
      '',
      'const app = initializeApp(firebaseConfig);',
      'export const auth = getAuth(app);',
      'export const db = getFirestore(app);'
    ],
    supabase: [
      '// Initialize Supabase in a supabase.js file:',
      'import { createClient } from "@supabase/supabase-js";',
      '',
      'const supabaseUrl = process.env.REACT_APP_SUPABASE_URL;',
      'const supabaseKey = process.env.REACT_APP_SUPABASE_KEY;',
      '',
      'export const supabase = createClient(supabaseUrl, supabaseKey);'
    ],
    // AI
    openai: [],
    huggingface: [],
    tensorflow: [],
    langchain: [],
    // Database & Auth
    prisma: [
      '// Create a prisma/schema.prisma file:',
      'generator client {',
      '  provider = "prisma-client-js"',
      '}',
      '',
      'datasource db {',
      '  provider = "postgresql"',
      '  url      = env("DATABASE_URL")',
      '}',
      '',
      '// Add your models here'
    ],
    nextauth: [
      '// NextAuth.js is primarily designed for Next.js',
      '// For React, consider using a different auth provider'
    ],
    // State Management
    vuex: [],
    redux: [
      '// Create a store.js file:',
      'import { configureStore } from "@reduxjs/toolkit";',
      '',
      'export const store = configureStore({',
      '  reducer: {},',
      '});'
    ],
    mobx: [],
    recoil: [
      '// Wrap your app with RecoilRoot:',
      'import { RecoilRoot } from "recoil";',
      '',
      '<RecoilRoot>',
      '  <App />',
      '</RecoilRoot>'
    ],
    jotai: [],
    zustand: [],
    // Components & Libraries
    recharts: [],
    'react-table': [],
    mdsvex: [],
    workbox: [],
  },
  next: {
    // Core features
    typescript: [],
    tailwind: [
      '// Configure tailwind.config.js and add to globals.css:',
      '@tailwind base;',
      '@tailwind components;',
      '@tailwind utilities;'
    ],
    eslint: [],
    router: [],
    sass: [],
    pwa: [
      '// Configure next.config.js with next-pwa',
      'const withPWA = require("next-pwa")({',
      '  dest: "public",',
      '});',
      '',
      'module.exports = withPWA({',
      '  // Your Next.js config',
      '});'
    ],
    prettier: [
      '// Create a .prettierrc file:',
      '{',
      '  "semi": true,',
      '  "tabWidth": 2,',
      '  "printWidth": 100,',
      '  "singleQuote": true,',
      '  "trailingComma": "es5"',
      '}'
    ],
    jest: [
      '// Add jest.config.js file:',
      'module.exports = {',
      '  testEnvironment: "jsdom",',
      '  setupFilesAfterEnv: ["<rootDir>/jest.setup.js"]',
      '};'
    ],
    vitest: [
      '// Add vitest.config.js file:',
      'import { defineConfig } from "vitest/config";',
      'import react from "@vitejs/plugin-react";',
      '',
      'export default defineConfig({',
      '  plugins: [react()],',
      '  test: {',
      '    environment: "jsdom"',
      '  }',
      '});'
    ],
    // UI Libraries 
    shadcn: [
      '// Run shadcn-ui init and follow the prompts',
      '// Import components like:',
      'import { Button } from "@/components/ui/button";'
    ],
    radix: [],
    aceternity: [],
    nextui: [
      '// Add NextUIProvider to _app.js:',
      'import { NextUIProvider } from "@nextui-org/react";',
      '',
      'export default function App({ Component, pageProps }) {',
      '  return (',
      '    <NextUIProvider>',
      '      <Component {...pageProps} />',
      '    </NextUIProvider>',
      '  );',
      '}'
    ],
    mantine: [
      '// Add MantineProvider to _app.js:',
      'import { MantineProvider } from "@mantine/core";',
      '',
      'export default function App({ Component, pageProps }) {',
      '  return (',
      '    <MantineProvider>',
      '      <Component {...pageProps} />',
      '    </MantineProvider>',
      '  );',
      '}'
    ],
    chakra: [
      '// Add ChakraProvider to _app.js:',
      'import { ChakraProvider } from "@chakra-ui/react";',
      '',
      'export default function App({ Component, pageProps }) {',
      '  return (',
      '    <ChakraProvider>',
      '      <Component {...pageProps} />',
      '    </ChakraProvider>',
      '  );',
      '}'
    ],
    framer: [],
    // Payment
    stripe: [],
    razorpay: [],
    paypal: [],
    // Cloud
    aws: [],
    azure: [],
    gcp: [],
    firebase: [
      '// Initialize Firebase in a firebase.js file:',
      'import { initializeApp } from "firebase/app";',
      'import { getAuth } from "firebase/auth";',
      'import { getFirestore } from "firebase/firestore";',
      '',
      'const firebaseConfig = {',
      '  // Your Firebase config',
      '};',
      '',
      'const app = initializeApp(firebaseConfig);',
      'export const auth = getAuth(app);',
      'export const db = getFirestore(app);'
    ],
    supabase: [
      '// Initialize Supabase in a supabase.js file:',
      'import { createClient } from "@supabase/supabase-js";',
      '',
      'const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;',
      'const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_KEY;',
      '',
      'export const supabase = createClient(supabaseUrl, supabaseKey);'
    ],
    // AI
    openai: [],
    huggingface: [],
    tensorflow: [],
    langchain: [],
    // Database & Auth
    prisma: [
      '// Create a prisma/schema.prisma file:',
      'generator client {',
      '  provider = "prisma-client-js"',
      '}',
      '',
      'datasource db {',
      '  provider = "postgresql"',
      '  url      = env("DATABASE_URL")',
      '}',
      '',
      '// Add your models here'
    ],
    nextauth: [
      '// Initialize NextAuth.js in pages/api/auth/[...nextauth].js:',
      'import NextAuth from "next-auth";',
      'import GithubProvider from "next-auth/providers/github";',
      '',
      'export default NextAuth({',
      '  providers: [',
      '    GithubProvider({',
      '      clientId: process.env.GITHUB_ID,',
      '      clientSecret: process.env.GITHUB_SECRET,',
      '    }),',
      '  ],',
      '});'
    ],
    // State Management
    vuex: [],
    redux: [
      '// Create a store.js file:',
      'import { configureStore } from "@reduxjs/toolkit";',
      '',
      'export const store = configureStore({',
      '  reducer: {},',
      '});'
    ],
    mobx: [],
    recoil: [
      '// Wrap your app with RecoilRoot in _app.js:',
      'import { RecoilRoot } from "recoil";',
      '',
      'export default function App({ Component, pageProps }) {',
      '  return (',
      '    <RecoilRoot>',
      '      <Component {...pageProps} />',
      '    </RecoilRoot>',
      '  );',
      '}'
    ],
    jotai: [],
    zustand: [],
    // Components & Libraries
    recharts: [],
    'react-table': [],
    mdsvex: [],
    workbox: [],
  },
  vue: {
    // Core features
    typescript: [],
    tailwind: [
      '// Configure tailwind.config.js and add to main.css:',
      '@tailwind base;',
      '@tailwind components;',
      '@tailwind utilities;'
    ],
    eslint: [],
    router: [],
    sass: [],
    pwa: [],
    prettier: [
      '// Create a .prettierrc file:',
      '{',
      '  "semi": true,',
      '  "tabWidth": 2,',
      '  "printWidth": 100,',
      '  "singleQuote": true,',
      '  "trailingComma": "es5"',
      '}'
    ],
    jest: [],
    vitest: [],
    shadcn: [],
    radix: [],
    aceternity: [],
    nextui: [],
    mantine: [],
    chakra: [],
    framer: [],
    stripe: [],
    razorpay: [],
    paypal: [],
    aws: [],
    azure: [],
    gcp: [],
    firebase: [],
    supabase: [],
    openai: [],
    huggingface: [],
    tensorflow: [],
    langchain: [],
    prisma: [],
    nextauth: [],
    vuex: [],
    redux: [],
    mobx: [],
    recoil: [],
    jotai: [],
    zustand: [],
    recharts: [],
    'react-table': [],
    mdsvex: [],
    workbox: [],
  },
  nuxt: {
    // Core features
    typescript: [],
    tailwind: [
      '// Add to nuxt.config.js:',
      'modules: [',
      '  "@nuxtjs/tailwindcss"',
      ']'
    ],
    eslint: [],
    router: [],
    sass: [],
    pwa: [],
    prettier: [
      '// Create a .prettierrc file:',
      '{',
      '  "semi": true,',
      '  "tabWidth": 2,',
      '  "printWidth": 100,',
      '  "singleQuote": true,',
      '  "trailingComma": "es5"',
      '}'
    ],
    jest: [],
    vitest: [],
    shadcn: [],
    radix: [],
    aceternity: [],
    nextui: [],
    mantine: [],
    chakra: [],
    framer: [],
    stripe: [],
    razorpay: [],
    paypal: [],
    aws: [],
    azure: [],
    gcp: [],
    firebase: [],
    supabase: [],
    openai: [],
    huggingface: [],
    tensorflow: [],
    langchain: [],
    prisma: [],
    nextauth: [],
    vuex: [],
    redux: [],
    mobx: [],
    recoil: [],
    jotai: [],
    zustand: [],
    recharts: [],
    'react-table': [],
    mdsvex: [],
    workbox: [],
  },
  svelte: {
    // Core features
    typescript: [],
    tailwind: [
      '// Configure tailwind.config.js and add to app.css:',
      '@tailwind base;',
      '@tailwind components;',
      '@tailwind utilities;'
    ],
    eslint: [],
    router: [],
    sass: [],
    pwa: [],
    prettier: [
      '// Create a .prettierrc file:',
      '{',
      '  "semi": true,',
      '  "tabWidth": 2,',
      '  "printWidth": 100,',
      '  "singleQuote": true,',
      '  "svelteSortOrder": "options-scripts-markup-styles",',
      '  "svelteStrictMode": true,',
      '  "svelteBracketNewLine": true,',
      '  "svelteAllowShorthand": true,',
      '  "plugins": ["prettier-plugin-svelte"]',
      '}'
    ],
    jest: [],
    vitest: [],
    shadcn: [],
    radix: [],
    aceternity: [],
    nextui: [],
    mantine: [],
    chakra: [],
    framer: [],
    stripe: [],
    razorpay: [],
    paypal: [],
    aws: [],
    azure: [],
    gcp: [],
    firebase: [],
    supabase: [],
    openai: [],
    huggingface: [],
    tensorflow: [],
    langchain: [],
    prisma: [],
    nextauth: [],
    vuex: [],
    redux: [],
    mobx: [],
    recoil: [],
    jotai: [],
    zustand: [],
    recharts: [],
    'react-table': [],
    mdsvex: [],
    workbox: [],
  },
  solid: {
    // Core features
    typescript: [],
    tailwind: [
      '// Configure tailwind.config.js and add to index.css:',
      '@tailwind base;',
      '@tailwind components;',
      '@tailwind utilities;'
    ],
    eslint: [],
    router: [],
    sass: [],
    pwa: [],
    prettier: [
      '// Create a .prettierrc file:',
      '{',
      '  "semi": true,',
      '  "tabWidth": 2,',
      '  "printWidth": 100,',
      '  "singleQuote": true,',
      '  "trailingComma": "es5"',
      '}'
    ],
    jest: [],
    vitest: [],
    shadcn: [],
    radix: [],
    aceternity: [],
    nextui: [],
    mantine: [],
    chakra: [],
    framer: [],
    stripe: [],
    razorpay: [],
    paypal: [],
    aws: [],
    azure: [],
    gcp: [],
    firebase: [],
    supabase: [],
    openai: [],
    huggingface: [],
    tensorflow: [],
    langchain: [],
    prisma: [],
    nextauth: [],
    vuex: [],
    redux: [],
    mobx: [],
    recoil: [],
    jotai: [],
    zustand: [],
    recharts: [],
    'react-table': [],
    mdsvex: [],
    workbox: [],
  },
};
